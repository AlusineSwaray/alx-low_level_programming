!<arch>
0-isupper.c/    0           0     0     644     219       `
#include "main.h"

/**
 * _isupper - checks for letters character
 * @p: number to be checked
 *
 * Return: 1 if digit. 0 otherwise
 */

int _isupper(int p)
{
	if (p >= 48 && p < 58)
		return (1);
	else
		return (0);
}

0-memset.c/     0           0     0     644     520       `
/**
 * _memset - a function that fills
 *         memory with a constant byte
 *
 * @s: input pointer to char type
 *    represents the pointer to the
 *    block of memory to fill
 * @b: input variable of char type
 *    represents the character to
 *    fill s
 * @n: unsigned int variable
 *    the number of bytes to be filled
 *
 * Return: A pointer to the filled memory
 *         area @s
*/

char *_memset(char *s, char b, unsigned int n)
{

	unsigned int i;

	for (i = 0; i < n; i++)
		s[i] = b;

	return (s);
}
0-strcat.c/     0           0     0     644     336       `
#include "main.h"

/**
 * _strcat - reverses a string array approach
 *@src: input string pointer
 *@dest: buffer pointer
 *
 * Return: void
 */

char *_strcat(char *dest, char *src)
{
	char *ptr = dest;

	while (*ptr != '\0')
	{
		ptr++;
	}
	while (*src != '\0')
	{
		*ptr = *src;
		ptr++;
		src++;
	}
	*ptr = '\0';
	return (dest);
}

1-isdigit.c/    0           0     0     644     219       `
#include "main.h"

/**
 * _isdigit - checks for letters character
 * @p: number to be checked
 *
 * Return: 1 if digit. 0 otherwise
 */

int _isdigit(int p)
{
	if (p >= 48 && p < 58)
		return (1);
	else
		return (0);
}

1-memcpy.c/     0           0     0     644     317       `
/**
 * _memcpy - function that copies memory area
 *
 * @dest: buffer where we will copy to
 * @src: what we are to copy
 * @n: n bytes of @src
 *
 * Return: Always 0 (Success)
*/

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		dest[i] = src[i];
	return (dest);
}

1-strncat.c/    0           0     0     644     427       `
#include "main.h"

/**
 * _strncat - reverses a string array approach
 *@src: input string pointer
 *@dest: buffer pointer
 *@n: size of src that will be appended
 *
 * Return: void
 */

char *_strncat(char *dest, char *src, int n)
{
	char *ptr = dest;
	int i;

	while (*ptr != '\0')
	{
		ptr++;
	}
	for (i = 0; i < n; i++)
	{
		if (*src != '\0')
		{
			*ptr = *src;
			ptr++;
			src++;
		}
	}
	*ptr = '\0';
	return (dest);
}


100-atoi.c/     0           0     0     644     380       `
#include "main.h"

/**
 * _atoi - takes a pointer to an int and update its value to 98
 *@s: pointer to be updated
 *
 * Return: void
 */

int _atoi(char *s)
{
	int sign = 1;
	unsigned int num = 0;

	do {
		if (*s == '-')
			sign *= -1;

		else if (*s >= '0' && *s <= '9')
			num = (num * 10) + (*s - '0');

		else if (num > 0)
			break;
	} while (*s++);

	return (num * sign);
}
2-strchr.c/     0           0     0     644     364       `
/**
 * _strchr - a function that locates a character in a string
 *
 * @s: pointer to our string array input
 * @c: character to locate from input array
 *
 * Return: first occurence of charatcer or null if not found
*/

char *_strchr(char *s, char c)
{
	while (*s != '\0')
	{
		if (*s == c)
			return (s);
		s++;
	}

	if (*s == c)
		return (s);
	return ('\0');
}
2-strlen.c/     0           0     0     644     371       `
#include "main.h"

/**
 * _strlen - takes a pointer to an int and update its value to 98
 *@s: pointer to be updated
 *
 * Return: int
 */

int _strlen(char *s)
{
	int i = 0;

	while (*s != '\0')/*set a condition to not print null zero*/
	{
		i++;/*i increases for every iteration*/
		s++;/*increament the pointer value so it'll point to the next val*/
	}
	return (i);
}

2-strncpy.c/    0           0     0     644     394       `
#include "main.h"

/**
 * _strncpy - copies a string to the buffer dest
 *@src: input string pointer
 *@dest: buffer pointer
 *@n: size of src that will be appended
 *
 * Return: void
 */

char *_strncpy(char *dest, char *src, int n)
{
	char *ptr = dest;
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
	{
		ptr[i] = src[i];
	}
	for (; i < n; i++)
	{
		ptr[i] = '\0';
	}
	return (dest);
}

3-islower.c/    0           0     0     644     224       `
#include "main.h"

/**
 * _islower - checks for lowercase character
 * @c: letter to be checked
 *
 * Return: 1 if lower. 0 otherwise
 */

int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
		return (1);
	else
		return (0);
}
3-puts.c/       0           0     0     644     355       `
#include "main.h"

/**
 * _puts - takes a pointer to an int and update its value to 98
 *@words: pointer to be updated
 *
 * Return: void
 */

void _puts(char *words)
{

	while (*words != '\0')/*set a condition to not print null zero*/
	{
		_putchar(*words);
		words++;/*increament the pointer value so it'll point to the next val*/
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     268       `
#include "main.h"

/**
 * _strcmp - compares 2 strings
 *@s1: string 1
 *@s2: string 2
 *
 * Return: void
 */

int _strcmp(char *s1, char *s2)
{
	while (*s1 != '\0' || *s2 != '\0')
	{
		if (*s1 != *s2)
		{
			return (*s1 - *s2);
		}
		s1++;
		s2++;
	}
	return (0);
}

3-strspn.c/     0           0     0     644     512       `
/**
 * _strspn - a function that gets the
 *           length of a prexif substring
 *
 * @s: pointer to string input
 * @accept: substring prefix to look for
 *
 * Return: the number of bytes in the initial segment
*/

unsigned int _strspn(char *s, char *accept)
{
	int i, j, f;

	i = 0;
	while (s[i] != '\0')
	{
		j = 0;
		f = 1; /*flag status*/
		while (accept[j] != '\0')
		{
			if (s[i] == accept[j])
			{
				f = 0; /*success*/
				break;
			}
			j++;
		}
		if (f == 1)
			break;
		i++;
	}

	return (i);
}
4-isalpha.c/    0           0     0     644     273       `
#include "main.h"

/**
 * _isalpha - checks for letters character
 * @c: letter to be checked
 *
 * Return: 1 if alphabetic. 0 otherwise
 */

int _isalpha(int c)
{
	if (c >= 'a' && c <= 'z')
		return (1);
	else if (c >= 'A' && c <= 'Z')
		return (1);
	else
		return (0);
}

4-strpbrk.c/    0           0     0     644     492       `
/**
 * _strpbrk - a function that searches a
 *            string for any of a set of bytes.
 *
 * @s: pointer to input string
 * @accept: pointer to string we
 *         searching for in @s
 *
 * Return: pointer to the bytes in @s
 *         or NULL if no such byte is found
*/

char *_strpbrk(char *s, char *accept)
{
	int i, j;

	i = 0;
	while (s[i] != '\0')
	{
		j = 0;
		while (accept[j] != '\0')
		{
			if (s[i] == accept[j])
				return (s + i);
			j++;
		}
		i++;
	}
	return ('\0');
}
5-strstr.c/     0           0     0     644     662       `
/**
 * _strstr - a function that locates a substring
 *
 * @haystack: input string to search for matching
 *            substrings
 * @needle: subtring to search for
 *
 * Return: a pointer to the beginning
 *         of the located substring or
 *         NULL if substring is not found
*/

char *_strstr(char *haystack, char *needle)
{
	/**
	 * we initialize a helping variable
	 * to assist in returning one of
	 * our parameters pointers haystack
	*/
	char *h, *n;

	while (*haystack != '\0')
	{
		h = haystack;
		n = needle;
		while (*n != '\0' && *haystack == *n)
		{
			haystack++;
			n++;
		}
		if (!*n)
			return (h);
		haystack++;
	}
	return ('\0');
}
6-abs.c/        0           0     0     644     208       `
#include "main.h"

/**
 * _abs - checks for lowercase character
 * @c: letter to be checked
 *
 * Return: abs for absolute. c otherwise
 */

int _abs(int c)
{
	if (c < 0)
		return (-c);
	else
		return (c);
}
9-strcpy.c/     0           0     0     644     336       `
#include "main.h"

/**
 * _strcpy - reverses a string array approach
 *@src: input string pointer
 *@dest: buffer pointer
 *
 * Return: void
 */

char *_strcpy(char *dest, char *src)
{
	char *ptr = dest;

	while (*ptr != '\0')
	{
		ptr++;
	}
	while (*src != '\0')
	{
		*ptr = *src;
		ptr++;
		src++;
	}
	*ptr = '\0';
	return (dest);
}

_putchar.c/     0           0     0     644     194       `
#include "unistd.h"

/**
 * _putchar - writes the character c on screen
 * @c: input character
 *
 * Return: 1 on success
 * on error, -1
 */

int _putchar(char c)
{
	return(write(1, &c, 1));
}
